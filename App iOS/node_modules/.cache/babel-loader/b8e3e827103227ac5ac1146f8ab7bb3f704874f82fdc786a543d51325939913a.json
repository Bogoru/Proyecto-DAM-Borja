{"ast":null,"code":"import { NativeModules } from 'react-native';\nimport { BleScanCallbackType, BleScanMatchCount, BleScanMatchMode, BleScanMode } from './types';\nexport * from './types';\nvar bleManager = NativeModules.BleManager;\nclass BleManager {\n  constructor() {\n    this.isPeripheralConnected = this.isPeripheralConnected.bind(this);\n  }\n  /**\n   *\n   * @param peripheralId\n   * @param serviceUUID\n   * @param characteristicUUID\n   * @returns data as an array of numbers (which can be converted back to a Uint8Array (ByteArray) using something like [Buffer.from()](https://github.com/feross/buffer))\n   */\n  read(peripheralId, serviceUUID, characteristicUUID) {\n    return new Promise((fulfill, reject) => {\n      bleManager.read(peripheralId, serviceUUID, characteristicUUID, (error, data) => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill(data);\n        }\n      });\n    });\n  }\n  /**\n   *\n   * @param peripheralId\n   * @param serviceUUID\n   * @param characteristicUUID\n   * @param descriptorUUID\n   * @returns data as an array of numbers (which can be converted back to a Uint8Array (ByteArray) using something like [Buffer.from()](https://github.com/feross/buffer))\n   */\n  readDescriptor(peripheralId, serviceUUID, characteristicUUID, descriptorUUID) {\n    return new Promise((fulfill, reject) => {\n      bleManager.readDescriptor(peripheralId, serviceUUID, characteristicUUID, descriptorUUID, (error, data) => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill(data);\n        }\n      });\n    });\n  }\n  /**\n   *\n   * @param peripheralId\n   * @returns a promise resolving with the updated RSSI (`number`) if it succeeds.\n   */\n  readRSSI(peripheralId) {\n    return new Promise((fulfill, reject) => {\n      bleManager.readRSSI(peripheralId, (error, rssi) => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill(rssi);\n        }\n      });\n    });\n  }\n  /**\n   * [Android only]\n   * @param peripheralId\n   * @returns a promise that resolves to a boolean indicating if gatt was successfully refreshed or not.\n   */\n  refreshCache(peripheralId) {\n    return new Promise((fulfill, reject) => {\n      bleManager.refreshCache(peripheralId, (error, result) => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill(result);\n        }\n      });\n    });\n  }\n  /**\n   *\n   * @param peripheralId\n   * @param serviceUUIDs [iOS only] optional filter of services to retrieve.\n   * @returns\n   */\n  retrieveServices(peripheralId) {\n    let serviceUUIDs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return new Promise((fulfill, reject) => {\n      bleManager.retrieveServices(peripheralId, serviceUUIDs, (error, peripheral) => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill(peripheral);\n        }\n      });\n    });\n  }\n  /**\n   *\n   * @param peripheralId\n   * @param serviceUUID\n   * @param characteristicUUID\n   * @param data data to write as an array of numbers (which can be converted from a Uint8Array (ByteArray) using something like [Buffer.toJSON().data](https://github.com/feross/buffer))\n   * @param maxByteSize optional, defaults to 20\n   * @returns\n   */\n  write(peripheralId, serviceUUID, characteristicUUID, data) {\n    let maxByteSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 20;\n    return new Promise((fulfill, reject) => {\n      bleManager.write(peripheralId, serviceUUID, characteristicUUID, data, maxByteSize, error => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill();\n        }\n      });\n    });\n  }\n  /**\n   *\n   * @param peripheralId\n   * @param serviceUUID\n   * @param characteristicUUID\n   * @param data data to write as an array of numbers (which can be converted from a Uint8Array (ByteArray) using something like [Buffer.toJSON().data](https://github.com/feross/buffer))\n   * @param maxByteSize optional, defaults to 20\n   * @param queueSleepTime optional, defaults to 10. Only useful if data length is greater than maxByteSize.\n   * @returns\n   */\n  writeWithoutResponse(peripheralId, serviceUUID, characteristicUUID, data) {\n    let maxByteSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 20;\n    let queueSleepTime = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 10;\n    return new Promise((fulfill, reject) => {\n      bleManager.writeWithoutResponse(peripheralId, serviceUUID, characteristicUUID, data, maxByteSize, queueSleepTime, error => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill();\n        }\n      });\n    });\n  }\n  connect(peripheralId) {\n    return new Promise((fulfill, reject) => {\n      bleManager.connect(peripheralId, error => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill();\n        }\n      });\n    });\n  }\n  /**\n   * [Android only]\n   * @param peripheralId\n   * @param peripheralPin optional. will be used to auto-bond if possible.\n   * @returns\n   */\n  createBond(peripheralId) {\n    let peripheralPin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return new Promise((fulfill, reject) => {\n      bleManager.createBond(peripheralId, peripheralPin, error => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill();\n        }\n      });\n    });\n  }\n  /**\n   * [Android only]\n   * @param peripheralId\n   * @returns\n   */\n  removeBond(peripheralId) {\n    return new Promise((fulfill, reject) => {\n      bleManager.removeBond(peripheralId, error => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill();\n        }\n      });\n    });\n  }\n  /**\n   *\n   * @param peripheralId\n   * @param force [Android only] defaults to true.\n   * @returns\n   */\n  disconnect(peripheralId) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return new Promise((fulfill, reject) => {\n      bleManager.disconnect(peripheralId, force, error => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill();\n        }\n      });\n    });\n  }\n  startNotification(peripheralId, serviceUUID, characteristicUUID) {\n    return new Promise((fulfill, reject) => {\n      bleManager.startNotification(peripheralId, serviceUUID, characteristicUUID, error => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill();\n        }\n      });\n    });\n  }\n  /**\n   * [Android only]\n   * @param peripheralId\n   * @param serviceUUID\n   * @param characteristicUUID\n   * @param buffer\n   * @returns\n   */\n  startNotificationUseBuffer(peripheralId, serviceUUID, characteristicUUID, buffer) {\n    return new Promise((fulfill, reject) => {\n      bleManager.startNotificationUseBuffer(peripheralId, serviceUUID, characteristicUUID, buffer, error => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill();\n        }\n      });\n    });\n  }\n  stopNotification(peripheralId, serviceUUID, characteristicUUID) {\n    return new Promise((fulfill, reject) => {\n      bleManager.stopNotification(peripheralId, serviceUUID, characteristicUUID, error => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill();\n        }\n      });\n    });\n  }\n  checkState() {\n    return new Promise((fulfill, _) => {\n      bleManager.checkState(state => {\n        fulfill(state);\n      });\n    });\n  }\n  start(options) {\n    return new Promise((fulfill, reject) => {\n      if (options == null) {\n        options = {};\n      }\n      bleManager.start(options, error => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill();\n        }\n      });\n    });\n  }\n  /**\n   *\n   * @param serviceUUIDs\n   * @param seconds amount of seconds to scan. if set to 0 or less, will scan until you call stopScan() or the OS stops the scan (background etc).\n   * @param allowDuplicates [iOS only]\n   * @param scanningOptions [Android only] optional map of properties to fine-tune scan behavior on android, see README.\n   * @returns\n   */\n  scan(serviceUUIDs, seconds, allowDuplicates) {\n    let scanningOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    return new Promise((fulfill, reject) => {\n      if (allowDuplicates == null) {\n        allowDuplicates = false;\n      }\n      // (ANDROID) Match as many advertisement per filter as hw could allow\n      // depends on current capability and availability of the resources in hw.\n      if (scanningOptions.numberOfMatches == null) {\n        scanningOptions.numberOfMatches = BleScanMatchCount.MaxAdvertisements;\n      }\n      // (ANDROID) Defaults to MATCH_MODE_AGGRESSIVE\n      if (scanningOptions.matchMode == null) {\n        scanningOptions.matchMode = BleScanMatchMode.Aggressive;\n      }\n      // (ANDROID) Defaults to SCAN_MODE_LOW_POWER\n      if (scanningOptions.scanMode == null) {\n        scanningOptions.scanMode = BleScanMode.LowPower;\n      }\n      // (ANDROID) Defaults to CALLBACK_TYPE_ALL_MATCHES \n      // WARN: sometimes, setting a scanSetting instead of leaving it untouched might result in unexpected behaviors.\n      // https://github.com/dariuszseweryn/RxAndroidBle/issues/462\n      if (scanningOptions.callbackType == null) {\n        scanningOptions.callbackType = BleScanCallbackType.AllMatches;\n      }\n      // (ANDROID) Defaults to 0ms (report results immediately).\n      if (scanningOptions.reportDelay == null) {\n        scanningOptions.reportDelay = 0;\n      }\n      // (ANDROID) ScanFilter used to restrict search to devices with a specific advertising name.\n      // https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder#setDeviceName(java.lang.String)\n      if (!scanningOptions.exactAdvertisingName || typeof scanningOptions.exactAdvertisingName !== 'string') {\n        delete scanningOptions.exactAdvertisingName;\n      }\n      bleManager.scan(serviceUUIDs, seconds, allowDuplicates, scanningOptions, error => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill();\n        }\n      });\n    });\n  }\n  stopScan() {\n    return new Promise((fulfill, reject) => {\n      bleManager.stopScan(error => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill();\n        }\n      });\n    });\n  }\n  /**\n   * [Android only] triggers an ENABLE_REQUEST intent to the end-user to enable bluetooth.\n   * @returns\n   */\n  enableBluetooth() {\n    return new Promise((fulfill, reject) => {\n      bleManager.enableBluetooth(error => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill();\n        }\n      });\n    });\n  }\n  /**\n   *\n   * @param serviceUUIDs [optional] not used on android, optional on ios.\n   * @returns\n   */\n  getConnectedPeripherals() {\n    let serviceUUIDs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return new Promise((fulfill, reject) => {\n      bleManager.getConnectedPeripherals(serviceUUIDs, (error, result) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (result) {\n            fulfill(result);\n          } else {\n            fulfill([]);\n          }\n        }\n      });\n    });\n  }\n  /**\n   * [Android only]\n   * @returns\n   */\n  getBondedPeripherals() {\n    return new Promise((fulfill, reject) => {\n      bleManager.getBondedPeripherals((error, result) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (result) {\n            fulfill(result);\n          } else {\n            fulfill([]);\n          }\n        }\n      });\n    });\n  }\n  getDiscoveredPeripherals() {\n    return new Promise((fulfill, reject) => {\n      bleManager.getDiscoveredPeripherals((error, result) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (result) {\n            fulfill(result);\n          } else {\n            fulfill([]);\n          }\n        }\n      });\n    });\n  }\n  /**\n   * [Android only]\n   * @param peripheralId\n   * @returns\n   */\n  removePeripheral(peripheralId) {\n    return new Promise((fulfill, reject) => {\n      bleManager.removePeripheral(peripheralId, error => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill();\n        }\n      });\n    });\n  }\n  /**\n   * @param peripheralId\n   * @param serviceUUIDs [optional] not used on android, optional on ios.\n   * @returns\n   */\n  isPeripheralConnected(peripheralId) {\n    let serviceUUIDs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return this.getConnectedPeripherals(serviceUUIDs).then(result => {\n      if (result.find(p => p.id === peripheralId)) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n  }\n  /**\n   * [Android only, API 21+]\n   * @param peripheralId\n   * @param connectionPriority\n   * @returns a promise that resolves with a boolean indicating of the connection priority was changed successfully, or rejects with an error message.\n   */\n  requestConnectionPriority(peripheralId, connectionPriority) {\n    return new Promise((fulfill, reject) => {\n      bleManager.requestConnectionPriority(peripheralId, connectionPriority, (error, status) => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill(status);\n        }\n      });\n    });\n  }\n  /**\n   * [Android only, API 21+]\n   * @param peripheralId\n   * @param mtu size to be requested, in bytes.\n   * @returns a promise resolving with the negotiated MTU if it succeeded. Beware that it might not be the one requested due to device's BLE limitations on both side of the negotiation.\n   */\n  requestMTU(peripheralId, mtu) {\n    return new Promise((fulfill, reject) => {\n      bleManager.requestMTU(peripheralId, mtu, (error, mtu) => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill(mtu);\n        }\n      });\n    });\n  }\n  /**\n   * [Android only]\n   * @param name\n   */\n  setName(name) {\n    bleManager.setName(name);\n  }\n}\nexport default new BleManager();","map":{"version":3,"names":["NativeModules","BleScanCallbackType","BleScanMatchCount","BleScanMatchMode","BleScanMode","bleManager","BleManager","constructor","isPeripheralConnected","bind","read","peripheralId","serviceUUID","characteristicUUID","Promise","fulfill","reject","error","data","readDescriptor","descriptorUUID","readRSSI","rssi","refreshCache","result","retrieveServices","serviceUUIDs","arguments","length","undefined","peripheral","write","maxByteSize","writeWithoutResponse","queueSleepTime","connect","createBond","peripheralPin","removeBond","disconnect","force","startNotification","startNotificationUseBuffer","buffer","stopNotification","checkState","_","state","start","options","scan","seconds","allowDuplicates","scanningOptions","numberOfMatches","MaxAdvertisements","matchMode","Aggressive","scanMode","LowPower","callbackType","AllMatches","reportDelay","exactAdvertisingName","stopScan","enableBluetooth","getConnectedPeripherals","getBondedPeripherals","getDiscoveredPeripherals","removePeripheral","then","find","p","id","requestConnectionPriority","connectionPriority","status","requestMTU","mtu","setName","name"],"sources":["/Users/borjagomezruiz/Desktop/Sensae/node_modules/react-native-ble-manager/src/index.ts"],"sourcesContent":["import { NativeModules } from 'react-native';\nimport {\n  BleScanCallbackType,\n  BleScanMatchCount,\n  BleScanMatchMode,\n  BleScanMode,\n  BleState,\n  ConnectionPriority,\n  Peripheral,\n  PeripheralInfo,\n  ScanOptions,\n  StartOptions\n} from './types';\n\nexport * from './types';\n\nvar bleManager = NativeModules.BleManager;\n\nclass BleManager {\n  constructor() {\n    this.isPeripheralConnected = this.isPeripheralConnected.bind(this);\n  }\n\n  /**\n   * \n   * @param peripheralId \n   * @param serviceUUID \n   * @param characteristicUUID \n   * @returns data as an array of numbers (which can be converted back to a Uint8Array (ByteArray) using something like [Buffer.from()](https://github.com/feross/buffer))\n   */\n  read(peripheralId: string, serviceUUID: string, characteristicUUID: string) {\n    return new Promise<number[]>((fulfill, reject) => {\n      bleManager.read(\n        peripheralId,\n        serviceUUID,\n        characteristicUUID,\n        (error: string | null, data: number[]) => {\n          if (error) {\n            reject(error);\n          } else {\n            fulfill(data);\n          }\n        }\n      );\n    });\n  }\n\n  /**\n   * \n   * @param peripheralId \n   * @param serviceUUID \n   * @param characteristicUUID \n   * @param descriptorUUID\n   * @returns data as an array of numbers (which can be converted back to a Uint8Array (ByteArray) using something like [Buffer.from()](https://github.com/feross/buffer))\n   */\n  readDescriptor(peripheralId: string, serviceUUID: string, characteristicUUID: string, descriptorUUID: string) {\n    return new Promise<number[]>((fulfill, reject) => {\n      bleManager.readDescriptor(\n        peripheralId,\n        serviceUUID,\n        characteristicUUID,\n        descriptorUUID,\n        (error: string | null, data: number[]) => {\n          if (error) {\n            reject(error);\n          } else {\n            fulfill(data);\n          }\n        }\n      );\n    });\n  }\n\n  /**\n   * \n   * @param peripheralId \n   * @returns a promise resolving with the updated RSSI (`number`) if it succeeds.\n   */\n  readRSSI(peripheralId: string) {\n    return new Promise<number>((fulfill, reject) => {\n      bleManager.readRSSI(peripheralId, (error: string | null, rssi: number) => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill(rssi);\n        }\n      });\n    });\n  }\n\n  /**\n   * [Android only]\n   * @param peripheralId \n   * @returns a promise that resolves to a boolean indicating if gatt was successfully refreshed or not.\n   */\n  refreshCache(peripheralId: string) {\n    return new Promise<boolean>((fulfill, reject) => {\n      bleManager.refreshCache(peripheralId, (error: string | null, result: boolean) => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill(result);\n        }\n      });\n    });\n  }\n\n  /**\n   * \n   * @param peripheralId \n   * @param serviceUUIDs [iOS only] optional filter of services to retrieve.\n   * @returns \n   */\n  retrieveServices(peripheralId: string, serviceUUIDs: string[] = []) {\n    return new Promise<PeripheralInfo>((fulfill, reject) => {\n      bleManager.retrieveServices(\n        peripheralId,\n        serviceUUIDs,\n        (error: string | null, peripheral: PeripheralInfo) => {\n          if (error) {\n            reject(error);\n          } else {\n            fulfill(peripheral);\n          }\n        }\n      );\n    });\n  }\n\n  /**\n   * \n   * @param peripheralId \n   * @param serviceUUID \n   * @param characteristicUUID \n   * @param data data to write as an array of numbers (which can be converted from a Uint8Array (ByteArray) using something like [Buffer.toJSON().data](https://github.com/feross/buffer))\n   * @param maxByteSize optional, defaults to 20\n   * @returns \n   */\n  write(\n    peripheralId: string,\n    serviceUUID: string,\n    characteristicUUID: string,\n    data: number[],\n    maxByteSize: number = 20\n  ) {\n\n    return new Promise<void>((fulfill, reject) => {\n      bleManager.write(\n        peripheralId,\n        serviceUUID,\n        characteristicUUID,\n        data,\n        maxByteSize,\n        (error: string | null) => {\n          if (error) {\n            reject(error);\n          } else {\n            fulfill();\n          }\n        }\n      );\n    });\n  }\n\n  /**\n   * \n   * @param peripheralId \n   * @param serviceUUID \n   * @param characteristicUUID \n   * @param data data to write as an array of numbers (which can be converted from a Uint8Array (ByteArray) using something like [Buffer.toJSON().data](https://github.com/feross/buffer))\n   * @param maxByteSize optional, defaults to 20\n   * @param queueSleepTime optional, defaults to 10. Only useful if data length is greater than maxByteSize.\n   * @returns \n   */\n  writeWithoutResponse(\n    peripheralId: string,\n    serviceUUID: string,\n    characteristicUUID: string,\n    data: number[],\n    maxByteSize: number = 20,\n    queueSleepTime: number = 10\n  ) {\n\n    return new Promise<void>((fulfill, reject) => {\n      bleManager.writeWithoutResponse(\n        peripheralId,\n        serviceUUID,\n        characteristicUUID,\n        data,\n        maxByteSize,\n        queueSleepTime,\n        (error: string | null) => {\n          if (error) {\n            reject(error);\n          } else {\n            fulfill();\n          }\n        }\n      );\n    });\n  }\n\n  connect(peripheralId: string) {\n    return new Promise<void>((fulfill, reject) => {\n      bleManager.connect(peripheralId, (error: string | null) => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill();\n        }\n      });\n    });\n  }\n\n  /**\n   * [Android only]\n   * @param peripheralId \n   * @param peripheralPin optional. will be used to auto-bond if possible.\n   * @returns \n   */\n  createBond(peripheralId: string, peripheralPin: string | null = null) {\n    return new Promise<void>((fulfill, reject) => {\n      bleManager.createBond(peripheralId, peripheralPin, (error: string | null) => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill();\n        }\n      });\n    });\n  }\n\n  /**\n   * [Android only]\n   * @param peripheralId \n   * @returns \n   */\n  removeBond(peripheralId: string) {\n    return new Promise<void>((fulfill, reject) => {\n      bleManager.removeBond(peripheralId, (error: string | null) => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill();\n        }\n      });\n    });\n  }\n\n  /**\n   * \n   * @param peripheralId \n   * @param force [Android only] defaults to true.\n   * @returns \n   */\n  disconnect(peripheralId: string, force: boolean = true) {\n    return new Promise<void>((fulfill, reject) => {\n      bleManager.disconnect(peripheralId, force, (error: string | null) => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill();\n        }\n      });\n    });\n  }\n\n  startNotification(peripheralId: string, serviceUUID: string, characteristicUUID: string) {\n    return new Promise<void>((fulfill, reject) => {\n      bleManager.startNotification(\n        peripheralId,\n        serviceUUID,\n        characteristicUUID,\n        (error: string | null) => {\n          if (error) {\n            reject(error);\n          } else {\n            fulfill();\n          }\n        }\n      );\n    });\n  }\n\n  /**\n   * [Android only]\n   * @param peripheralId \n   * @param serviceUUID \n   * @param characteristicUUID \n   * @param buffer \n   * @returns \n   */\n  startNotificationUseBuffer(\n    peripheralId: string,\n    serviceUUID: string,\n    characteristicUUID: string,\n    buffer: number\n  ) {\n    return new Promise<void>((fulfill, reject) => {\n      bleManager.startNotificationUseBuffer(\n        peripheralId,\n        serviceUUID,\n        characteristicUUID,\n        buffer,\n        (error: string | null) => {\n          if (error) {\n            reject(error);\n          } else {\n            fulfill();\n          }\n        }\n      );\n    });\n  }\n\n  stopNotification(peripheralId: string, serviceUUID: string, characteristicUUID: string) {\n    return new Promise<void>((fulfill, reject) => {\n      bleManager.stopNotification(\n        peripheralId,\n        serviceUUID,\n        characteristicUUID,\n        (error: string | null) => {\n          if (error) {\n            reject(error);\n          } else {\n            fulfill();\n          }\n        }\n      );\n    });\n  }\n\n  checkState() {\n    return new Promise<BleState>((fulfill, _) => {\n      bleManager.checkState((state: BleState) => {\n        fulfill(state);\n      });\n    });\n  }\n\n  start(options?: StartOptions) {\n    return new Promise<void>((fulfill, reject) => {\n      if (options == null) {\n        options = {};\n      }\n      bleManager.start(options, (error: string | null) => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill();\n        }\n      });\n    });\n  }\n\n  /**\n   * \n   * @param serviceUUIDs \n   * @param seconds amount of seconds to scan. if set to 0 or less, will scan until you call stopScan() or the OS stops the scan (background etc).\n   * @param allowDuplicates [iOS only]\n   * @param scanningOptions [Android only] optional map of properties to fine-tune scan behavior on android, see README.\n   * @returns \n   */\n  scan(\n    serviceUUIDs: string[],\n    seconds: number,\n    allowDuplicates?: boolean,\n    scanningOptions: ScanOptions = {}\n  ) {\n\n    return new Promise<void>((fulfill, reject) => {\n      if (allowDuplicates == null) {\n        allowDuplicates = false;\n      }\n\n      // (ANDROID) Match as many advertisement per filter as hw could allow\n      // depends on current capability and availability of the resources in hw.\n      if (scanningOptions.numberOfMatches == null) {\n        scanningOptions.numberOfMatches = BleScanMatchCount.MaxAdvertisements;\n      }\n\n      // (ANDROID) Defaults to MATCH_MODE_AGGRESSIVE\n      if (scanningOptions.matchMode == null) {\n        scanningOptions.matchMode = BleScanMatchMode.Aggressive;\n      }\n\n      // (ANDROID) Defaults to SCAN_MODE_LOW_POWER\n      if (scanningOptions.scanMode == null) {\n        scanningOptions.scanMode = BleScanMode.LowPower;\n      }\n\n      // (ANDROID) Defaults to CALLBACK_TYPE_ALL_MATCHES \n      // WARN: sometimes, setting a scanSetting instead of leaving it untouched might result in unexpected behaviors.\n      // https://github.com/dariuszseweryn/RxAndroidBle/issues/462\n      if (scanningOptions.callbackType == null) {\n        scanningOptions.callbackType = BleScanCallbackType.AllMatches;\n      }\n\n      // (ANDROID) Defaults to 0ms (report results immediately).\n      if (scanningOptions.reportDelay == null) {\n        scanningOptions.reportDelay = 0;\n      }\n\n      // (ANDROID) ScanFilter used to restrict search to devices with a specific advertising name.\n      // https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder#setDeviceName(java.lang.String)\n      if (!scanningOptions.exactAdvertisingName\n        || typeof scanningOptions.exactAdvertisingName !== 'string') {\n        delete scanningOptions.exactAdvertisingName;\n      }\n\n      bleManager.scan(\n        serviceUUIDs,\n        seconds,\n        allowDuplicates,\n        scanningOptions,\n        (error: string | null) => {\n          if (error) {\n            reject(error);\n          } else {\n            fulfill();\n          }\n        }\n      );\n    });\n  }\n\n  stopScan() {\n    return new Promise<void>((fulfill, reject) => {\n      bleManager.stopScan((error: string | null) => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill();\n        }\n      });\n    });\n  }\n\n  /**\n   * [Android only] triggers an ENABLE_REQUEST intent to the end-user to enable bluetooth.\n   * @returns \n   */\n  enableBluetooth() {\n    return new Promise<void>((fulfill, reject) => {\n      bleManager.enableBluetooth((error: string | null) => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill();\n        }\n      });\n    });\n  }\n\n  /**\n   * \n   * @param serviceUUIDs [optional] not used on android, optional on ios.\n   * @returns \n   */\n  getConnectedPeripherals(serviceUUIDs: string[] = []) {\n    return new Promise<Peripheral[]>((fulfill, reject) => {\n\n      bleManager.getConnectedPeripherals(serviceUUIDs, (error: string | null, result: Peripheral[] | null) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (result) {\n            fulfill(result);\n          } else {\n            fulfill([]);\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * [Android only]\n   * @returns \n   */\n  getBondedPeripherals() {\n    return new Promise<Peripheral[]>((fulfill, reject) => {\n      bleManager.getBondedPeripherals((error: string | null, result: Peripheral[] | null) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (result) {\n            fulfill(result);\n          } else {\n            fulfill([]);\n          }\n        }\n      });\n    });\n  }\n\n  getDiscoveredPeripherals() {\n    return new Promise<Peripheral[]>((fulfill, reject) => {\n      bleManager.getDiscoveredPeripherals((error: string | null, result: Peripheral[] | null) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (result) {\n            fulfill(result);\n          } else {\n            fulfill([]);\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * [Android only]\n   * @param peripheralId \n   * @returns \n   */\n  removePeripheral(peripheralId: string) {\n    return new Promise<void>((fulfill, reject) => {\n      bleManager.removePeripheral(peripheralId, (error: string | null) => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill();\n        }\n      });\n    });\n  }\n\n  /**\n   * @param peripheralId \n   * @param serviceUUIDs [optional] not used on android, optional on ios.\n   * @returns \n   */\n  isPeripheralConnected(peripheralId: string, serviceUUIDs: string[] = []) {\n    return this.getConnectedPeripherals(serviceUUIDs).then(result => {\n      if (result.find(p => p.id === peripheralId)) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n  }\n\n  /**\n   * [Android only, API 21+]\n   * @param peripheralId \n   * @param connectionPriority \n   * @returns a promise that resolves with a boolean indicating of the connection priority was changed successfully, or rejects with an error message.\n   */\n  requestConnectionPriority(peripheralId: string, connectionPriority: ConnectionPriority) {\n    return new Promise<boolean>((fulfill, reject) => {\n      bleManager.requestConnectionPriority(\n        peripheralId,\n        connectionPriority,\n        (error: string | null, status: boolean) => {\n          if (error) {\n            reject(error);\n          } else {\n            fulfill(status);\n          }\n        }\n      );\n    });\n  }\n\n\n  /**\n   * [Android only, API 21+]\n   * @param peripheralId\n   * @param mtu size to be requested, in bytes.\n   * @returns a promise resolving with the negotiated MTU if it succeeded. Beware that it might not be the one requested due to device's BLE limitations on both side of the negotiation.\n   */\n  requestMTU(peripheralId: string, mtu: number) {\n    return new Promise<number>((fulfill, reject) => {\n      bleManager.requestMTU(peripheralId, mtu, (error: string | null, mtu: number) => {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill(mtu);\n        }\n      });\n    });\n  }\n\n  /**\n   * [Android only]\n   * @param name \n   */\n  setName(name: string) {\n    bleManager.setName(name);\n  }\n}\n\nexport default new BleManager();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}