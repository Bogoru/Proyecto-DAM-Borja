{"ast":null,"code":"/**\n * android states: https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#EXTRA_STATE\n * ios states: https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerstate\n * */\nexport var BleState;\n(function (BleState) {\n  /**\n   * [iOS only]\n   */\n  BleState[\"Unknown\"] = \"unknown\";\n  /**\n   * [iOS only]\n   */\n  BleState[\"Resetting\"] = \"resetting\";\n  BleState[\"Unsupported\"] = \"unsupported\";\n  /**\n   * [iOS only]\n   */\n  BleState[\"Unauthorized\"] = \"unauthorized\";\n  BleState[\"On\"] = \"on\";\n  BleState[\"Off\"] = \"off\";\n  /**\n   * [android only]\n   */\n  BleState[\"TurningOn\"] = \"turning_on\";\n  /**\n   * [android only]\n   */\n  BleState[\"TurningOff\"] = \"turning_off\";\n})(BleState || (BleState = {}));\n/**\n * [android only]\n */\nexport var BleScanMode;\n(function (BleScanMode) {\n  BleScanMode[BleScanMode[\"Opportunistic\"] = -1] = \"Opportunistic\";\n  BleScanMode[BleScanMode[\"LowPower\"] = 0] = \"LowPower\";\n  BleScanMode[BleScanMode[\"Balanced\"] = 1] = \"Balanced\";\n  BleScanMode[BleScanMode[\"LowLatency\"] = 2] = \"LowLatency\";\n})(BleScanMode || (BleScanMode = {}));\n/**\n * [android only]\n */\nexport var BleScanMatchMode;\n(function (BleScanMatchMode) {\n  BleScanMatchMode[BleScanMatchMode[\"Aggressive\"] = 1] = \"Aggressive\";\n  BleScanMatchMode[BleScanMatchMode[\"Sticky\"] = 2] = \"Sticky\";\n})(BleScanMatchMode || (BleScanMatchMode = {}));\n/**\n * [android only]\n */\nexport var BleScanCallbackType;\n(function (BleScanCallbackType) {\n  BleScanCallbackType[BleScanCallbackType[\"AllMatches\"] = 1] = \"AllMatches\";\n  BleScanCallbackType[BleScanCallbackType[\"FirstMatch\"] = 2] = \"FirstMatch\";\n  BleScanCallbackType[BleScanCallbackType[\"MatchLost\"] = 4] = \"MatchLost\";\n})(BleScanCallbackType || (BleScanCallbackType = {}));\n/**\n * [android only]\n */\nexport var BleScanMatchCount;\n(function (BleScanMatchCount) {\n  BleScanMatchCount[BleScanMatchCount[\"OneAdvertisement\"] = 1] = \"OneAdvertisement\";\n  BleScanMatchCount[BleScanMatchCount[\"FewAdvertisements\"] = 2] = \"FewAdvertisements\";\n  BleScanMatchCount[BleScanMatchCount[\"MaxAdvertisements\"] = 3] = \"MaxAdvertisements\";\n})(BleScanMatchCount || (BleScanMatchCount = {}));\n/**\n * [android only]\n */\nexport var BleScanPhyMode;\n(function (BleScanPhyMode) {\n  BleScanPhyMode[BleScanPhyMode[\"LE_1M\"] = 1] = \"LE_1M\";\n  BleScanPhyMode[BleScanPhyMode[\"LE_2M\"] = 2] = \"LE_2M\";\n  BleScanPhyMode[BleScanPhyMode[\"LE_CODED\"] = 3] = \"LE_CODED\";\n  BleScanPhyMode[BleScanPhyMode[\"ALL_SUPPORTED\"] = 255] = \"ALL_SUPPORTED\";\n})(BleScanPhyMode || (BleScanPhyMode = {}));\n/**\n * [android only API 21+]\n */\nexport var ConnectionPriority;\n(function (ConnectionPriority) {\n  ConnectionPriority[ConnectionPriority[\"balanced\"] = 0] = \"balanced\";\n  ConnectionPriority[ConnectionPriority[\"high\"] = 1] = \"high\";\n  ConnectionPriority[ConnectionPriority[\"low\"] = 2] = \"low\";\n})(ConnectionPriority || (ConnectionPriority = {}));\nexport var BleEventType;\n(function (BleEventType) {\n  BleEventType[\"BleManagerDidUpdateState\"] = \"BleManagerDidUpdateState\";\n  BleEventType[\"BleManagerStopScan\"] = \"BleManagerStopScan\";\n  BleEventType[\"BleManagerDiscoverPeripheral\"] = \"BleManagerDiscoverPeripheral\";\n  BleEventType[\"BleManagerDidUpdateValueForCharacteristic\"] = \"BleManagerDidUpdateValueForCharacteristic\";\n  BleEventType[\"BleManagerConnectPeripheral\"] = \"BleManagerConnectPeripheral\";\n  BleEventType[\"BleManagerDisconnectPeripheral\"] = \"BleManagerDisconnectPeripheral\";\n  /**\n   * [Android only]\n   */\n  BleEventType[\"BleManagerPeripheralDidBond\"] = \"BleManagerPeripheralDidBond\";\n  /**\n   * [iOS only]\n   */\n  BleEventType[\"BleManagerCentralManagerWillRestoreState\"] = \"BleManagerCentralManagerWillRestoreState\";\n  /**\n   * [iOS only]\n   */\n  BleEventType[\"BleManagerDidUpdateNotificationStateFor\"] = \"BleManagerDidUpdateNotificationStateFor\";\n})(BleEventType || (BleEventType = {}));","map":{"version":3,"names":["BleState","BleScanMode","BleScanMatchMode","BleScanCallbackType","BleScanMatchCount","BleScanPhyMode","ConnectionPriority","BleEventType"],"sources":["/Users/borjagomezruiz/Desktop/Sensae/node_modules/react-native-ble-manager/src/types.ts"],"sourcesContent":["/**\n * android states: https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#EXTRA_STATE\n * ios states: https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerstate\n * */\nexport enum BleState {\n  /**\n   * [iOS only]\n   */\n  Unknown = 'unknown',\n  /**\n   * [iOS only]\n   */\n  Resetting = 'resetting',\n  Unsupported = 'unsupported',\n  /**\n   * [iOS only]\n   */\n  Unauthorized = 'unauthorized',\n  On = 'on',\n  Off = 'off',\n  /**\n   * [android only]\n   */\n  TurningOn = 'turning_on',\n  /**\n   * [android only]\n   */ \n  TurningOff = 'turning_off',\n}\n\nexport interface Peripheral {\n  id: string;\n  rssi: number;\n  name?: string;\n  advertising: AdvertisingData;\n}\n\nexport interface AdvertisingData {\n  isConnectable?: boolean;\n  localName?: string;\n  manufacturerData?: CustomAdvertisingData,\n  serviceData?: CustomAdvertisingData,\n  serviceUUIDs?: string[];\n  txPowerLevel?: number;\n}\n\nexport interface CustomAdvertisingData {\n  CDVType: 'ArrayBuffer',\n  /**\n   * data as an array of numbers (which can be converted back to a Uint8Array (ByteArray),\n   * using something like [Buffer.from()](https://github.com/feross/buffer))\n   */\n  bytes: number[],\n  /**\n   * base64-encoded string of the data\n   */\n  data: string\n}\n\nexport interface StartOptions {\n  /**\n   * [iOS only]\n   */\n  showAlert?: boolean;\n  /**\n   * [iOS only]\n   */\n  restoreIdentifierKey?: string;\n  /**\n   * [iOS only]\n   */\n  queueIdentifierKey?: string;\n  /**\n   * [android only]\n   */\n  forceLegacy?: boolean;\n}\n\n/**\n * [android only]\n * https://developer.android.com/reference/android/bluetooth/le/ScanSettings\n */ \nexport interface ScanOptions {\n  /** \n   * This will only works if a ScanFilter is active. Otherwise, may not retrieve any result.\n   * See https://developer.android.com/reference/android/bluetooth/le/ScanSettings#MATCH_NUM_FEW_ADVERTISEMENT. \n   * */\n  numberOfMatches?: BleScanMatchCount;\n  matchMode?: BleScanMatchMode;\n  /** \n   * This will only works if a ScanFilter is active. Otherwise, may not retrieve any result.\n   * See https://developer.android.com/reference/android/bluetooth/le/ScanSettings#CALLBACK_TYPE_FIRST_MATCH.\n   * Also read [this issue](https://github.com/dariuszseweryn/RxAndroidBle/issues/561#issuecomment-532295346) for a deeper understanding \n   * of the very brittle stability of ScanSettings on android.\n   * */\n  callbackType?: BleScanCallbackType;\n  scanMode?: BleScanMode;\n  /**\n   * This is supposed to push results after a certain delay.\n   * In practice it is tricky, use with caution.\n   * Do not set something below 5000ms as it will wait that long anyway before pushing the first results,\n   * or on some phones it will ignore that setting and behave just like it was set to 0.\n   * Set your minimum scan duration accordingly, otherwise you will not retrieve the batched results.\n   * https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder#setReportDelay(long)\n   */\n  reportDelay?: number;\n  /**\n   * Does not work in conjunction with legacy scans. Setting an unsupported PHY will result in a failure to scan,\n   * use with caution.\n   * https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder#setPhy(int)\n   */\n  phy?: BleScanPhyMode;\n  /**\n   * true by default for compatibility with older apps. \n   * In that mode, scan will only retrieve advertisements data as specified by BLE 4.2 and below.\n   * Change this if you want to benefit from the extended BLE 5 advertisement spec.\n   * https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder#setLegacy(boolean)\n   */\n  legacy?: boolean;\n  /**\n   * an android ScanFilter, used if present to restrict scan results to devices with a specific advertising name.\n   * This is a whole word match, not a partial search.\n   * Use with caution, it's behavior is tricky and seems to be the following: \n   * if `callbackType` is set to `AllMatches`, only the completeLocalName will be used for filtering.\n   * if `callbackType` is set to `FirstMatch`, the shortenedLocalName will be used for filtering.\n   * https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder#setDeviceName(java.lang.String)\n   */\n  exactAdvertisingName?: string;\n}\n\n/**\n * [android only]\n */\nexport enum BleScanMode {\n  Opportunistic = -1,\n  LowPower = 0,\n  Balanced = 1,\n  LowLatency = 2,\n}\n\n/**\n * [android only]\n */\nexport enum BleScanMatchMode {\n  Aggressive = 1,\n  Sticky = 2,\n}\n\n/**\n * [android only]\n */\nexport enum BleScanCallbackType {\n  AllMatches = 1,\n  FirstMatch = 2,\n  MatchLost = 4,\n}\n\n/**\n * [android only]\n */\nexport enum BleScanMatchCount {\n  OneAdvertisement = 1,\n  FewAdvertisements = 2,\n  MaxAdvertisements = 3,\n}\n\n/**\n * [android only]\n */\nexport enum BleScanPhyMode {\n  LE_1M = 1,\n  LE_2M = 2,\n  LE_CODED = 3,\n  ALL_SUPPORTED = 255,\n}\n\n/**\n * [android only API 21+]\n */\nexport enum ConnectionPriority {\n  balanced = 0,\n  high = 1,\n  low = 2,\n}\n\nexport interface Service {\n  uuid: string;\n}\n\nexport interface Descriptor {\n  value: string;\n  uuid: string;\n}\n\nexport interface Characteristic {\n  /**\n   * See https://developer.apple.com/documentation/corebluetooth/cbcharacteristicproperties\n   */\n  properties: {\n    Broadcast?: \"Broadcast\";\n    Read?: \"Read\";\n    WriteWithoutResponse?: \"WriteWithoutResponse\";\n    Write?: \"Write\";\n    Notify?: \"Notify\";\n    Indicate?: \"Indicate\";\n    AuthenticatedSignedWrites?: \"AuthenticatedSignedWrites\";\n    ExtendedProperties?: \"ExtendedProperties\";\n    NotifyEncryptionRequired?: \"NotifyEncryptionRequired\";\n    IndicateEncryptionRequired?: \"IndicateEncryptionRequired\";\n  }\n  characteristic: string;\n  service: string;\n  descriptors?: Descriptor[];\n\n}\n\nexport interface PeripheralInfo extends Peripheral {\n  serviceUUIDs?: string[];\n  characteristics?: Characteristic[];\n  services?: Service[];\n}\n\nexport enum BleEventType {\n  BleManagerDidUpdateState = 'BleManagerDidUpdateState',\n  BleManagerStopScan = 'BleManagerStopScan',\n  BleManagerDiscoverPeripheral = 'BleManagerDiscoverPeripheral',\n  BleManagerDidUpdateValueForCharacteristic = 'BleManagerDidUpdateValueForCharacteristic',\n  BleManagerConnectPeripheral = 'BleManagerConnectPeripheral',\n  BleManagerDisconnectPeripheral = 'BleManagerDisconnectPeripheral',\n  /**\n   * [Android only]\n   */\n  BleManagerPeripheralDidBond = 'BleManagerPeripheralDidBond',\n  /**\n   * [iOS only]\n   */\n  BleManagerCentralManagerWillRestoreState = 'BleManagerCentralManagerWillRestoreState',\n  /**\n   * [iOS only]\n   */\n  BleManagerDidUpdateNotificationStateFor = 'BleManagerDidUpdateNotificationStateFor',\n}\n\nexport interface BleStopScanEvent {\n  /**\n   * [iOS only]\n   */\n  status?: number;\n}\n\nexport interface BleManagerDidUpdateStateEvent {\n  state: BleState;\n}\n\nexport interface BleConnectPeripheralEvent {\n  /**\n   * peripheral id\n   */\n  readonly peripheral: string;\n  /**\n   * [android only]\n   */\n  readonly status?: number;\n}\n\nexport type BleDiscoverPeripheralEvent = Peripheral;\n\n/**\n * [Android only]\n */\nexport type BleBondedPeripheralEvent = Peripheral;\n\nexport interface BleDisconnectPeripheralEvent {\n  /**\n   * peripheral id\n   */\n  readonly peripheral: string;\n  /**\n   * [android only] disconnect reason.\n   */\n  readonly status?: number;\n  /**\n   * [iOS only] disconnect error domain.\n   */\n  readonly domain?: string;\n  /**\n   * [iOS only] disconnect error code.\n   */\n  readonly code?: number;\n}\n\nexport interface BleManagerDidUpdateValueForCharacteristicEvent {\n  /**\n   * characteristic UUID\n   */\n  readonly characteristic: string;\n  /**\n   * peripheral id\n   */\n  readonly peripheral: string;\n  /**\n   * service UUID\n   */\n  readonly service: string;\n  /**\n   * data as an array of numbers (which can be converted back to a Uint8Array (ByteArray), \n   * using something like [Buffer.from()](https://github.com/feross/buffer))\n   */\n  readonly value: number[];\n}\n\n/**\n * [iOS only]\n */\nexport interface BleManagerDidUpdateNotificationStateForEvent {\n  /**\n   * peripheral id\n   */\n  readonly peripheral: string;\n  /**\n   * characteristic UUID\n   */\n  readonly characteristic: string;\n  /**\n   * is the characteristic notifying or not\n   */\n  readonly isNotifying: boolean;\n  /**\n   * error domain\n   */\n  readonly domain: string;\n  /**\n   * error code\n   */\n  readonly code: number;\n}"],"mappings":"AAAA;;;;AAIA,WAAYA,QAwBX;AAxBD,WAAYA,QAAQ;EAClB;;;EAGAA,QAAA,uBAAmB;EACnB;;;EAGAA,QAAA,2BAAuB;EACvBA,QAAA,+BAA2B;EAC3B;;;EAGAA,QAAA,iCAA6B;EAC7BA,QAAA,aAAS;EACTA,QAAA,eAAW;EACX;;;EAGAA,QAAA,4BAAwB;EACxB;;;EAGAA,QAAA,8BAA0B;AAC5B,CAAC,EAxBWA,QAAQ,KAARA,QAAQ;AA8HpB;;;AAGA,WAAYC,WAKX;AALD,WAAYA,WAAW;EACrBA,WAAA,CAAAA,WAAA,yCAAkB;EAClBA,WAAA,CAAAA,WAAA,8BAAY;EACZA,WAAA,CAAAA,WAAA,8BAAY;EACZA,WAAA,CAAAA,WAAA,kCAAc;AAChB,CAAC,EALWA,WAAW,KAAXA,WAAW;AAOvB;;;AAGA,WAAYC,gBAGX;AAHD,WAAYA,gBAAgB;EAC1BA,gBAAA,CAAAA,gBAAA,kCAAc;EACdA,gBAAA,CAAAA,gBAAA,0BAAU;AACZ,CAAC,EAHWA,gBAAgB,KAAhBA,gBAAgB;AAK5B;;;AAGA,WAAYC,mBAIX;AAJD,WAAYA,mBAAmB;EAC7BA,mBAAA,CAAAA,mBAAA,kCAAc;EACdA,mBAAA,CAAAA,mBAAA,kCAAc;EACdA,mBAAA,CAAAA,mBAAA,gCAAa;AACf,CAAC,EAJWA,mBAAmB,KAAnBA,mBAAmB;AAM/B;;;AAGA,WAAYC,iBAIX;AAJD,WAAYA,iBAAiB;EAC3BA,iBAAA,CAAAA,iBAAA,8CAAoB;EACpBA,iBAAA,CAAAA,iBAAA,gDAAqB;EACrBA,iBAAA,CAAAA,iBAAA,gDAAqB;AACvB,CAAC,EAJWA,iBAAiB,KAAjBA,iBAAiB;AAM7B;;;AAGA,WAAYC,cAKX;AALD,WAAYA,cAAc;EACxBA,cAAA,CAAAA,cAAA,wBAAS;EACTA,cAAA,CAAAA,cAAA,wBAAS;EACTA,cAAA,CAAAA,cAAA,8BAAY;EACZA,cAAA,CAAAA,cAAA,0CAAmB;AACrB,CAAC,EALWA,cAAc,KAAdA,cAAc;AAO1B;;;AAGA,WAAYC,kBAIX;AAJD,WAAYA,kBAAkB;EAC5BA,kBAAA,CAAAA,kBAAA,8BAAY;EACZA,kBAAA,CAAAA,kBAAA,sBAAQ;EACRA,kBAAA,CAAAA,kBAAA,oBAAO;AACT,CAAC,EAJWA,kBAAkB,KAAlBA,kBAAkB;AA2C9B,WAAYC,YAmBX;AAnBD,WAAYA,YAAY;EACtBA,YAAA,yDAAqD;EACrDA,YAAA,6CAAyC;EACzCA,YAAA,iEAA6D;EAC7DA,YAAA,2FAAuF;EACvFA,YAAA,+DAA2D;EAC3DA,YAAA,qEAAiE;EACjE;;;EAGAA,YAAA,+DAA2D;EAC3D;;;EAGAA,YAAA,yFAAqF;EACrF;;;EAGAA,YAAA,uFAAmF;AACrF,CAAC,EAnBWA,YAAY,KAAZA,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}