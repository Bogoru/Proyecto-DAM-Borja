{"ast":null,"code":"const makeQueue = () => {\n  let currentTask = Promise.resolve();\n  // create a new promise so that errors can be bubbled\n  // up to the caller without being caught by the queue\n  return fn => new Promise((resolve, reject) => {\n    currentTask = currentTask.then(() => fn()).then(resolve).catch(reject);\n  });\n};\nexport function getQueue(enabled) {\n  if (enabled) {\n    return makeQueue();\n  }\n  return fn => fn();\n}","map":{"version":3,"names":["makeQueue","currentTask","Promise","resolve","fn","reject","then","catch","getQueue","enabled"],"sources":["/Users/Misana/Desktop/Sensae/node_modules/@capacitor-community/bluetooth-le/src/queue.ts"],"sourcesContent":["type Queue = <T>(fn: () => Promise<T>) => Promise<T>;\n\nconst makeQueue = (): Queue => {\n  let currentTask: Promise<unknown> = Promise.resolve();\n  // create a new promise so that errors can be bubbled\n  // up to the caller without being caught by the queue\n  return (fn) =>\n    new Promise((resolve, reject) => {\n      currentTask = currentTask\n        .then(() => fn())\n        .then(resolve)\n        .catch(reject);\n    });\n};\n\nexport function getQueue(enabled: boolean): Queue {\n  if (enabled) {\n    return makeQueue();\n  }\n  return (fn) => fn();\n}\n"],"mappings":"AAEA,MAAMA,SAAS,GAAGA,CAAA,KAAY;EAC5B,IAAIC,WAAW,GAAqBC,OAAO,CAACC,OAAO,EAAE;EACrD;EACA;EACA,OAAQC,EAAE,IACR,IAAIF,OAAO,CAAC,CAACC,OAAO,EAAEE,MAAM,KAAI;IAC9BJ,WAAW,GAAGA,WAAW,CACtBK,IAAI,CAAC,MAAMF,EAAE,EAAE,CAAC,CAChBE,IAAI,CAACH,OAAO,CAAC,CACbI,KAAK,CAACF,MAAM,CAAC;EAClB,CAAC,CAAC;AACN,CAAC;AAED,OAAM,SAAUG,QAAQA,CAACC,OAAgB;EACvC,IAAIA,OAAO,EAAE;IACX,OAAOT,SAAS,EAAE;;EAEpB,OAAQI,EAAE,IAAKA,EAAE,EAAE;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}