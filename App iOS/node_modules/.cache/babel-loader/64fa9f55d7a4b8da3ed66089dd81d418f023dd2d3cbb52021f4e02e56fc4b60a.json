{"ast":null,"code":"/**\n * Convert an array of numbers into a DataView.\n */\nexport function numbersToDataView(value) {\n  return new DataView(Uint8Array.from(value).buffer);\n}\n/**\n * Convert a DataView into an array of numbers.\n */\nexport function dataViewToNumbers(value) {\n  return Array.from(new Uint8Array(value.buffer));\n}\n/**\n * Convert a string into a DataView.\n */\nexport function textToDataView(value) {\n  return numbersToDataView(value.split('').map(s => s.charCodeAt(0)));\n}\n/**\n * Convert a DataView into a string.\n */\nexport function dataViewToText(value) {\n  return String.fromCharCode(...dataViewToNumbers(value));\n}\n/**\n * Convert a 16 bit UUID into a 128 bit UUID string\n * @param value number, e.g. 0x180d\n * @return string, e.g. '0000180d-0000-1000-8000-00805f9b34fb'\n */\nexport function numberToUUID(value) {\n  return `0000${value.toString(16).padStart(4, '0')}-0000-1000-8000-00805f9b34fb`;\n}\nexport function hexStringToDataView(value) {\n  const numbers = value.trim().split(' ').filter(e => e !== '').map(s => parseInt(s, 16));\n  return numbersToDataView(numbers);\n}\nexport function dataViewToHexString(value) {\n  return dataViewToNumbers(value).map(n => {\n    let s = n.toString(16);\n    if (s.length == 1) {\n      s = '0' + s;\n    }\n    return s;\n  }).join(' ');\n}\nexport function webUUIDToString(uuid) {\n  if (typeof uuid === 'string') {\n    return uuid;\n  } else if (typeof uuid === 'number') {\n    return numberToUUID(uuid);\n  } else {\n    throw new Error('Invalid UUID');\n  }\n}\nexport function mapToObject(map) {\n  const obj = {};\n  if (!map) {\n    return undefined;\n  }\n  map.forEach((value, key) => {\n    obj[key.toString()] = value;\n  });\n  return obj;\n}","map":{"version":3,"names":["numbersToDataView","value","DataView","Uint8Array","from","buffer","dataViewToNumbers","Array","textToDataView","split","map","s","charCodeAt","dataViewToText","String","fromCharCode","numberToUUID","toString","padStart","hexStringToDataView","numbers","trim","filter","e","parseInt","dataViewToHexString","n","length","join","webUUIDToString","uuid","Error","mapToObject","obj","undefined","forEach","key"],"sources":["/Users/Misana/Desktop/Borja/node_modules/@capacitor-community/bluetooth-le/src/conversion.ts"],"sourcesContent":["/**\n * Convert an array of numbers into a DataView.\n */\nexport function numbersToDataView(value: number[]): DataView {\n  return new DataView(Uint8Array.from(value).buffer);\n}\n\n/**\n * Convert a DataView into an array of numbers.\n */\nexport function dataViewToNumbers(value: DataView): number[] {\n  return Array.from(new Uint8Array(value.buffer));\n}\n\n/**\n * Convert a string into a DataView.\n */\nexport function textToDataView(value: string): DataView {\n  return numbersToDataView(value.split('').map((s) => s.charCodeAt(0)));\n}\n\n/**\n * Convert a DataView into a string.\n */\nexport function dataViewToText(value: DataView): string {\n  return String.fromCharCode(...dataViewToNumbers(value));\n}\n\n/**\n * Convert a 16 bit UUID into a 128 bit UUID string\n * @param value number, e.g. 0x180d\n * @return string, e.g. '0000180d-0000-1000-8000-00805f9b34fb'\n */\nexport function numberToUUID(value: number): string {\n  return `0000${value.toString(16).padStart(4, '0')}-0000-1000-8000-00805f9b34fb`;\n}\n\nexport function hexStringToDataView(value: string): DataView {\n  const numbers: number[] = value\n    .trim()\n    .split(' ')\n    .filter((e) => e !== '')\n    .map((s) => parseInt(s, 16));\n  return numbersToDataView(numbers);\n}\n\nexport function dataViewToHexString(value: DataView): string {\n  return dataViewToNumbers(value)\n    .map((n) => {\n      let s = n.toString(16);\n      if (s.length == 1) {\n        s = '0' + s;\n      }\n      return s;\n    })\n    .join(' ');\n}\n\nexport function webUUIDToString(uuid: string | number): string {\n  if (typeof uuid === 'string') {\n    return uuid;\n  } else if (typeof uuid === 'number') {\n    return numberToUUID(uuid);\n  } else {\n    throw new Error('Invalid UUID');\n  }\n}\n\nexport function mapToObject<V>(map?: Map<string | number, V>): { [key: string]: V } | undefined {\n  const obj: { [key: string]: V } = {};\n  if (!map) {\n    return undefined;\n  }\n  map.forEach((value, key) => {\n    obj[key.toString()] = value;\n  });\n  return obj;\n}\n"],"mappings":"AAAA;;;AAGA,OAAM,SAAUA,iBAAiBA,CAACC,KAAe;EAC/C,OAAO,IAAIC,QAAQ,CAACC,UAAU,CAACC,IAAI,CAACH,KAAK,CAAC,CAACI,MAAM,CAAC;AACpD;AAEA;;;AAGA,OAAM,SAAUC,iBAAiBA,CAACL,KAAe;EAC/C,OAAOM,KAAK,CAACH,IAAI,CAAC,IAAID,UAAU,CAACF,KAAK,CAACI,MAAM,CAAC,CAAC;AACjD;AAEA;;;AAGA,OAAM,SAAUG,cAAcA,CAACP,KAAa;EAC1C,OAAOD,iBAAiB,CAACC,KAAK,CAACQ,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;AACvE;AAEA;;;AAGA,OAAM,SAAUC,cAAcA,CAACZ,KAAe;EAC5C,OAAOa,MAAM,CAACC,YAAY,CAAC,GAAGT,iBAAiB,CAACL,KAAK,CAAC,CAAC;AACzD;AAEA;;;;;AAKA,OAAM,SAAUe,YAAYA,CAACf,KAAa;EACxC,OAAO,OAAOA,KAAK,CAACgB,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,8BAA8B;AACjF;AAEA,OAAM,SAAUC,mBAAmBA,CAAClB,KAAa;EAC/C,MAAMmB,OAAO,GAAanB,KAAK,CAC5BoB,IAAI,EAAE,CACNZ,KAAK,CAAC,GAAG,CAAC,CACVa,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAK,EAAE,CAAC,CACvBb,GAAG,CAAEC,CAAC,IAAKa,QAAQ,CAACb,CAAC,EAAE,EAAE,CAAC,CAAC;EAC9B,OAAOX,iBAAiB,CAACoB,OAAO,CAAC;AACnC;AAEA,OAAM,SAAUK,mBAAmBA,CAACxB,KAAe;EACjD,OAAOK,iBAAiB,CAACL,KAAK,CAAC,CAC5BS,GAAG,CAAEgB,CAAC,IAAI;IACT,IAAIf,CAAC,GAAGe,CAAC,CAACT,QAAQ,CAAC,EAAE,CAAC;IACtB,IAAIN,CAAC,CAACgB,MAAM,IAAI,CAAC,EAAE;MACjBhB,CAAC,GAAG,GAAG,GAAGA,CAAC;;IAEb,OAAOA,CAAC;EACV,CAAC,CAAC,CACDiB,IAAI,CAAC,GAAG,CAAC;AACd;AAEA,OAAM,SAAUC,eAAeA,CAACC,IAAqB;EACnD,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAOA,IAAI;GACZ,MAAM,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IACnC,OAAOd,YAAY,CAACc,IAAI,CAAC;GAC1B,MAAM;IACL,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;;AAEnC;AAEA,OAAM,SAAUC,WAAWA,CAAItB,GAA6B;EAC1D,MAAMuB,GAAG,GAAyB,EAAE;EACpC,IAAI,CAACvB,GAAG,EAAE;IACR,OAAOwB,SAAS;;EAElBxB,GAAG,CAACyB,OAAO,CAAC,CAAClC,KAAK,EAAEmC,GAAG,KAAI;IACzBH,GAAG,CAACG,GAAG,CAACnB,QAAQ,EAAE,CAAC,GAAGhB,KAAK;EAC7B,CAAC,CAAC;EACF,OAAOgC,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}