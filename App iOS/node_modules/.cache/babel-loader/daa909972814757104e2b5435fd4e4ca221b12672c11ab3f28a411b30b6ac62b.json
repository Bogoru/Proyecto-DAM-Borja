{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { IonicNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nexport var KeyboardStyle;\n(function (KeyboardStyle) {\n  KeyboardStyle[\"Light\"] = \"light\";\n  KeyboardStyle[\"Dark\"] = \"dark\";\n})(KeyboardStyle || (KeyboardStyle = {}));\nexport var KeyboardResizeMode;\n(function (KeyboardResizeMode) {\n  KeyboardResizeMode[\"Native\"] = \"native\";\n  KeyboardResizeMode[\"Ionic\"] = \"ionic\";\n  KeyboardResizeMode[\"Body\"] = \"body\";\n  KeyboardResizeMode[\"None\"] = \"none\";\n})(KeyboardResizeMode || (KeyboardResizeMode = {}));\nvar KeyboardOriginal = /** @class */function (_super) {\n  __extends(KeyboardOriginal, _super);\n  function KeyboardOriginal() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  KeyboardOriginal.prototype.hideFormAccessoryBar = function (hide) {\n    return cordova(this, \"hideFormAccessoryBar\", {\n      \"sync\": true,\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n  KeyboardOriginal.prototype.hide = function () {\n    return cordova(this, \"hide\", {\n      \"sync\": true,\n      \"platforms\": [\"iOS\", \"Android\"]\n    }, arguments);\n  };\n  KeyboardOriginal.prototype.show = function () {\n    return cordova(this, \"show\", {\n      \"sync\": true,\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n  KeyboardOriginal.prototype.setResizeMode = function (mode) {\n    return cordova(this, \"setResizeMode\", {\n      \"sync\": true,\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n  KeyboardOriginal.prototype.setKeyboardStyle = function (style) {\n    return cordova(this, \"setKeyboardStyle\", {\n      \"sync\": true,\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n  KeyboardOriginal.prototype.disableScroll = function (disable) {\n    return cordova(this, \"disableScroll\", {\n      \"sync\": true,\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n  KeyboardOriginal.prototype.onKeyboardShow = function () {\n    return cordova(this, \"onKeyboardShow\", {\n      \"eventObservable\": true,\n      \"event\": \"native.keyboardshow\",\n      \"platforms\": [\"iOS\", \"Android\"]\n    }, arguments);\n  };\n  KeyboardOriginal.prototype.onKeyboardWillShow = function () {\n    return cordova(this, \"onKeyboardWillShow\", {\n      \"eventObservable\": true,\n      \"event\": \"keyboardWillShow\",\n      \"platforms\": [\"iOS\", \"Android\"]\n    }, arguments);\n  };\n  KeyboardOriginal.prototype.onKeyboardDidShow = function () {\n    return cordova(this, \"onKeyboardDidShow\", {\n      \"eventObservable\": true,\n      \"event\": \"keyboardDidShow\",\n      \"platforms\": [\"iOS\", \"Android\"]\n    }, arguments);\n  };\n  KeyboardOriginal.prototype.onKeyboardHide = function () {\n    return cordova(this, \"onKeyboardHide\", {\n      \"eventObservable\": true,\n      \"event\": \"native.keyboardhide\",\n      \"platforms\": [\"iOS\", \"Android\"]\n    }, arguments);\n  };\n  KeyboardOriginal.prototype.onKeyboardWillHide = function () {\n    return cordova(this, \"onKeyboardWillHide\", {\n      \"eventObservable\": true,\n      \"event\": \"keyboardWillHide\",\n      \"platforms\": [\"iOS\", \"Android\"]\n    }, arguments);\n  };\n  KeyboardOriginal.prototype.onKeyboardDidHide = function () {\n    return cordova(this, \"onKeyboardDidHide\", {\n      \"eventObservable\": true,\n      \"event\": \"keyboardDidHide\",\n      \"platforms\": [\"iOS\", \"Android\"]\n    }, arguments);\n  };\n  Object.defineProperty(KeyboardOriginal.prototype, \"isVisible\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"isVisible\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"isVisible\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  KeyboardOriginal.pluginName = \"Keyboard\";\n  KeyboardOriginal.plugin = \"cordova-plugin-ionic-keyboard\";\n  KeyboardOriginal.pluginRef = \"window.Keyboard\";\n  KeyboardOriginal.repo = \"https://github.com/ionic-team/cordova-plugin-ionic-keyboard\";\n  KeyboardOriginal.platforms = [\"Android\", \"iOS\"];\n  return KeyboardOriginal;\n}(IonicNativePlugin);\nvar Keyboard = new KeyboardOriginal();\nexport { Keyboard };","map":{"version":3,"names":["IonicNativePlugin","cordova","cordovaPropertyGet","cordovaPropertySet","Observable","KeyboardStyle","KeyboardResizeMode","__extends","KeyboardOriginal","_super","prototype","hideFormAccessoryBar","hide","arguments","show","setResizeMode","mode","setKeyboardStyle","style","disableScroll","disable","onKeyboardShow","onKeyboardWillShow","onKeyboardDidShow","onKeyboardHide","onKeyboardWillHide","onKeyboardDidHide"],"sources":["/Users/borjagomezruiz/Desktop/src/@ionic-native/plugins/keyboard/index.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, CordovaProperty, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\n\nexport enum KeyboardStyle {\n  Light = 'light',\n  Dark = 'dark',\n}\n\nexport enum KeyboardResizeMode {\n  Native = 'native',\n  Ionic = 'ionic',\n  Body = 'body',\n  None = 'none',\n}\n\n/**\n * @name Keyboard\n * @premier keyboard\n * @capacitorincompatible true\n * @description\n * Keyboard plugin for Cordova.\n *\n * Requires Cordova plugin: `cordova-plugin-ionic-keyboard`. For more info, please see the [Keyboard plugin docs](https://github.com/ionic-team/cordova-plugin-ionic-keyboard).\n *\n * @usage\n * ```typescript\n * import { Keyboard } from '@ionic-native/keyboard/ngx';\n *\n * constructor(private keyboard: Keyboard) { }\n *\n * ...\n *\n * this.keyboard.show();\n *\n * this.keyboard.hide();\n *\n * ```\n */\n@Plugin({\n  pluginName: 'Keyboard',\n  plugin: 'cordova-plugin-ionic-keyboard',\n  pluginRef: 'window.Keyboard',\n  repo: 'https://github.com/ionic-team/cordova-plugin-ionic-keyboard',\n  platforms: ['Android', 'iOS'],\n})\n@Injectable()\nexport class Keyboard extends IonicNativePlugin {\n  /**\n   * Check keyboard status visible or not.\n   * @returns {boolean}\n   */\n  @CordovaProperty()\n  isVisible: boolean;\n\n  /**\n   * Hide the keyboard accessory bar with the next, previous and done buttons.\n   * @param hide {boolean}\n   */\n  @Cordova({\n    sync: true,\n    platforms: ['iOS'],\n  })\n  hideFormAccessoryBar(hide: boolean): void {}\n\n  /**\n   * Hide the keyboard if shown.\n   */\n  @Cordova({\n    sync: true,\n    platforms: ['iOS', 'Android'],\n  })\n  hide(): void {}\n\n  /**\n   * Force keyboard to be shown.\n   */\n  @Cordova({\n    sync: true,\n    platforms: ['Android'],\n  })\n  show(): void {}\n\n  /**\n   * Programatically set the resize mode\n   * @param mode {string}\n   */\n  @Cordova({\n    sync: true,\n    platforms: ['iOS'],\n  })\n  setResizeMode(mode: KeyboardResizeMode): void {}\n\n  /**\n   * Programatically set Keyboard style\n   * @param mode {string}\n   */\n  @Cordova({\n    sync: true,\n    platforms: ['iOS'],\n  })\n  setKeyboardStyle(style: KeyboardStyle): void {}\n\n  /**\n   * Programatically enable or disable the WebView scroll\n   * @param mode {string}\n   */\n  @Cordova({\n    sync: true,\n    platforms: ['iOS'],\n  })\n  disableScroll(disable: boolean): void {}\n\n  /**\n   * Creates an observable that notifies you when the keyboard is shown. Unsubscribe to observable to cancel event watch.\n   * @returns {Observable<any>}\n   */\n  @Cordova({\n    eventObservable: true,\n    event: 'native.keyboardshow',\n    platforms: ['iOS', 'Android'],\n  })\n  onKeyboardShow(): Observable<any> {\n    return;\n  }\n\n  /**\n   * Creates an observable that notifies you when the keyboard will show. Unsubscribe to observable to cancel event watch.\n   * @returns {Observable<any>}\n   */\n  @Cordova({\n    eventObservable: true,\n    event: 'keyboardWillShow',\n    platforms: ['iOS', 'Android'],\n  })\n  onKeyboardWillShow(): Observable<any> {\n    return;\n  }\n\n  /**\n   * Creates an observable that notifies you when the keyboard did show. Unsubscribe to observable to cancel event watch.\n   * @returns {Observable<any>}\n   */\n  @Cordova({\n    eventObservable: true,\n    event: 'keyboardDidShow',\n    platforms: ['iOS', 'Android'],\n  })\n  onKeyboardDidShow(): Observable<any> {\n    return;\n  }\n\n  /**\n   * Creates an observable that notifies you when the keyboard is hidden. Unsubscribe to observable to cancel event watch.\n   * @returns {Observable<any>}\n   */\n  @Cordova({\n    eventObservable: true,\n    event: 'native.keyboardhide',\n    platforms: ['iOS', 'Android'],\n  })\n  onKeyboardHide(): Observable<any> {\n    return;\n  }\n\n  /**\n   * Creates an observable that notifies you when the keyboard will hide. Unsubscribe to observable to cancel event watch.\n   * @returns {Observable<any>}\n   */\n  @Cordova({\n    eventObservable: true,\n    event: 'keyboardWillHide',\n    platforms: ['iOS', 'Android'],\n  })\n  onKeyboardWillHide(): Observable<any> {\n    return;\n  }\n\n  /**\n   * Creates an observable that notifies you when the keyboard did hide. Unsubscribe to observable to cancel event watch.\n   * @returns {Observable<any>}\n   */\n  @Cordova({\n    eventObservable: true,\n    event: 'keyboardDidHide',\n    platforms: ['iOS', 'Android'],\n  })\n  onKeyboardDidHide(): Observable<any> {\n    return;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAAOA,iBAAA,EAAAC,OAAA,EAAAC,kBAAA,EAAAC,kBAAA,QAA6D,oBAAoB;AACxF,SAASC,UAAU,QAAQ,MAAM;AAEjC,WAAYC,aAGX;AAHD,WAAYA,aAAa;EACvBA,aAAA,mBAAe;EACfA,aAAA,iBAAa;AACf,CAAC,EAHWA,aAAa,KAAbA,aAAa;AAKzB,WAAYC,kBAKX;AALD,WAAYA,kBAAkB;EAC5BA,kBAAA,qBAAiB;EACjBA,kBAAA,mBAAe;EACfA,kBAAA,iBAAa;EACbA,kBAAA,iBAAa;AACf,CAAC,EALWA,kBAAkB,KAAlBA,kBAAkB;;EAsCAC,SAAA,CAAAC,gBAAA,EAAiBC,MAAA;;;;EAgB7CD,gBAAA,CAAAE,SAAA,CAAAC,oBAAoB,aAAcC,IAAA;IAAA,OAAAX,OAAA;MAAA;MAAA;IAAA,GAAAY,SAAA;EAAA;EASlCL,gBAAA,CAAAE,SAAI,CAAAE,IAAA;IAAA,OAAAX,OAAA;MAAA;MAAA;IAAA,GAAAY,SAAA;EAAA;EASJL,gBAAA,CAAAE,SAAI,CAAAI,IAAA;IAAA,OAAAb,OAAA;MAAA;MAAA;IAAA,GAAAY,SAAA;EAAA;EAUJL,gBAAA,CAAAE,SAAA,CAAAK,aAAa,aAAyBC,IAAA;IAAA,OAAAf,OAAA;MAAA;MAAA;IAAA,GAAAY,SAAA;EAAA;EAUtCL,gBAAA,CAAAE,SAAA,CAAAO,gBAAgB,aAAqBC,KAAA;IAAA,OAAAjB,OAAA;MAAA;MAAA;IAAA,GAAAY,SAAA;EAAA;EAUrCL,gBAAA,CAAAE,SAAA,CAAAS,aAAa,aAAiBC,OAAA;IAAA,OAAAnB,OAAA;MAAA;MAAA;IAAA,GAAAY,SAAA;EAAA;EAW9BL,gBAAA,CAAAE,SAAA,CAAAW,cAAc;IAAA,OAAApB,OAAA;MAAA;MAAA;MAAA;IAAA,GAAAY,SAAA;EAAA;EAadL,gBAAA,CAAAE,SAAA,CAAAY,kBAAkB;IAAA,OAAArB,OAAA;MAAA;MAAA;MAAA;IAAA,GAAAY,SAAA;EAAA;EAalBL,gBAAA,CAAAE,SAAA,CAAAa,iBAAiB;IAAA,OAAAtB,OAAA;MAAA;MAAA;MAAA;IAAA,GAAAY,SAAA;EAAA;EAajBL,gBAAA,CAAAE,SAAA,CAAAc,cAAc;IAAA,OAAAvB,OAAA;MAAA;MAAA;MAAA;IAAA,GAAAY,SAAA;EAAA;EAadL,gBAAA,CAAAE,SAAA,CAAAe,kBAAkB;IAAA,OAAAxB,OAAA;MAAA;MAAA;MAAA;IAAA,GAAAY,SAAA;EAAA;EAalBL,gBAAA,CAAAE,SAAA,CAAAgB,iBAAiB;IAAA,OAAAzB,OAAA;MAAA;MAAA;MAAA;IAAA,GAAAY,SAAA;EAAA;wBAtIjBL,gBAAA,CAAAE,SAAA,aAAS;;;;;;;;;;;;;;;yBArDX;EA+C8BV,iBAAiB;YAAlC,OAAQQ,gBAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}