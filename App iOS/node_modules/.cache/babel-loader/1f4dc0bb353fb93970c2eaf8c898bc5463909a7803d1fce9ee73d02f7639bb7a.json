{"ast":null,"code":"export function parseUUID(uuid) {\n  if (typeof uuid !== 'string') {\n    throw new Error(`Invalid UUID type ${typeof uuid}. Expected string.`);\n  }\n  uuid = uuid.toLowerCase();\n  const is128BitUuid = uuid.search(/^[0-9a-f]{8}\\b-[0-9a-f]{4}\\b-[0-9a-f]{4}\\b-[0-9a-f]{4}\\b-[0-9a-f]{12}$/) >= 0;\n  if (!is128BitUuid) {\n    throw new Error(`Invalid UUID format ${uuid}. Expected 128 bit string (e.g. \"0000180d-0000-1000-8000-00805f9b34fb\").`);\n  }\n  return uuid;\n}","map":{"version":3,"names":["parseUUID","uuid","Error","toLowerCase","is128BitUuid","search"],"sources":["/Users/Misana/Desktop/Borja/node_modules/@capacitor-community/bluetooth-le/src/validators.ts"],"sourcesContent":["export function parseUUID(uuid: any): string {\n  if (typeof uuid !== 'string') {\n    throw new Error(`Invalid UUID type ${typeof uuid}. Expected string.`);\n  }\n  uuid = uuid.toLowerCase();\n  const is128BitUuid = uuid.search(/^[0-9a-f]{8}\\b-[0-9a-f]{4}\\b-[0-9a-f]{4}\\b-[0-9a-f]{4}\\b-[0-9a-f]{12}$/) >= 0;\n  if (!is128BitUuid) {\n    throw new Error(\n      `Invalid UUID format ${uuid}. Expected 128 bit string (e.g. \"0000180d-0000-1000-8000-00805f9b34fb\").`\n    );\n  }\n  return uuid;\n}\n"],"mappings":"AAAA,OAAM,SAAUA,SAASA,CAACC,IAAS;EACjC,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B,MAAM,IAAIC,KAAK,CAAC,qBAAqB,OAAOD,IAAI,oBAAoB,CAAC;;EAEvEA,IAAI,GAAGA,IAAI,CAACE,WAAW,EAAE;EACzB,MAAMC,YAAY,GAAGH,IAAI,CAACI,MAAM,CAAC,wEAAwE,CAAC,IAAI,CAAC;EAC/G,IAAI,CAACD,YAAY,EAAE;IACjB,MAAM,IAAIF,KAAK,CACb,uBAAuBD,IAAI,0EAA0E,CACtG;;EAEH,OAAOA,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}