{"version":3,"file":"static/js/665.019664f5.chunk.js","mappings":"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","sources":["../node_modules/@capacitor-community/bluetooth-le/src/web.ts","../node_modules/@capacitor-community/bluetooth-le/src/timeout.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport { hexStringToDataView, mapToObject, webUUIDToString } from './conversion';\nimport type {\n  BleCharacteristic,\n  BleCharacteristicProperties,\n  BleDescriptor,\n  BleService,\n  TimeoutOptions,\n  BleDevice,\n  BleServices,\n  BluetoothLePlugin,\n  BooleanResult,\n  DeviceIdOptions,\n  GetConnectedDevicesOptions,\n  GetDevicesOptions,\n  GetDevicesResult,\n  ReadDescriptorOptions,\n  ReadOptions,\n  ReadResult,\n  ReadRssiResult,\n  RequestBleDeviceOptions,\n  ScanResultInternal,\n  WriteOptions,\n  WriteDescriptorOptions,\n  GetMtuResult,\n  RequestConnectionPriorityOptions,\n} from './definitions';\nimport { runWithTimeout } from './timeout';\n\nexport class BluetoothLeWeb extends WebPlugin implements BluetoothLePlugin {\n  private deviceMap = new Map<string, BluetoothDevice>();\n  private discoveredDevices = new Map<string, boolean>();\n  private scan: BluetoothLEScan | null = null;\n  private requestBleDeviceOptions: RequestBleDeviceOptions | undefined;\n  private DEFAULT_CONNECTION_TIMEOUT = 10000;\n\n  async initialize(): Promise<void> {\n    if (typeof navigator === 'undefined' || !navigator.bluetooth) {\n      throw this.unavailable('Web Bluetooth API not available in this browser.');\n    }\n    const isAvailable = await navigator.bluetooth.getAvailability();\n    if (!isAvailable) {\n      throw this.unavailable('No Bluetooth radio available.');\n    }\n  }\n\n  async isEnabled(): Promise<BooleanResult> {\n    // not available on web\n    return { value: true };\n  }\n\n  async enable(): Promise<void> {\n    throw this.unavailable('enable is not available on web.');\n  }\n\n  async disable(): Promise<void> {\n    throw this.unavailable('disable is not available on web.');\n  }\n\n  async startEnabledNotifications(): Promise<void> {\n    // not available on web\n  }\n\n  async stopEnabledNotifications(): Promise<void> {\n    // not available on web\n  }\n\n  async isLocationEnabled(): Promise<BooleanResult> {\n    throw this.unavailable('isLocationEnabled is not available on web.');\n  }\n\n  async openLocationSettings(): Promise<void> {\n    throw this.unavailable('openLocationSettings is not available on web.');\n  }\n\n  async openBluetoothSettings(): Promise<void> {\n    throw this.unavailable('openBluetoothSettings is not available on web.');\n  }\n\n  async openAppSettings(): Promise<void> {\n    throw this.unavailable('openAppSettings is not available on web.');\n  }\n\n  async setDisplayStrings(): Promise<void> {\n    // not available on web\n  }\n\n  async requestDevice(options?: RequestBleDeviceOptions): Promise<BleDevice> {\n    const filters = this.getFilters(options);\n    const device = await navigator.bluetooth.requestDevice({\n      filters: filters.length ? filters : undefined,\n      optionalServices: options?.optionalServices,\n      acceptAllDevices: filters.length === 0,\n    });\n    this.deviceMap.set(device.id, device);\n    const bleDevice = this.getBleDevice(device);\n    return bleDevice;\n  }\n\n  async requestLEScan(options?: RequestBleDeviceOptions): Promise<void> {\n    this.requestBleDeviceOptions = options;\n    const filters = this.getFilters(options);\n    await this.stopLEScan();\n    this.discoveredDevices = new Map<string, boolean>();\n    navigator.bluetooth.removeEventListener(\n      'advertisementreceived',\n      this.onAdvertisementReceivedCallback as EventListener\n    );\n    navigator.bluetooth.addEventListener('advertisementreceived', this.onAdvertisementReceivedCallback);\n    this.scan = await navigator.bluetooth.requestLEScan({\n      filters: filters.length ? filters : undefined,\n      acceptAllAdvertisements: filters.length === 0,\n      keepRepeatedDevices: options?.allowDuplicates,\n    });\n  }\n\n  private onAdvertisementReceivedCallback = this.onAdvertisementReceived.bind(this);\n\n  private onAdvertisementReceived(event: BluetoothAdvertisingEvent): void {\n    const deviceId = event.device.id;\n    this.deviceMap.set(deviceId, event.device);\n    const isNew = !this.discoveredDevices.has(deviceId);\n    if (isNew || this.requestBleDeviceOptions?.allowDuplicates) {\n      this.discoveredDevices.set(deviceId, true);\n      const device = this.getBleDevice(event.device);\n      const result: ScanResultInternal = {\n        device,\n        localName: device.name,\n        rssi: event.rssi,\n        txPower: event.txPower,\n        manufacturerData: mapToObject(event.manufacturerData),\n        serviceData: mapToObject(event.serviceData),\n        uuids: event.uuids?.map(webUUIDToString),\n      };\n      this.notifyListeners('onScanResult', result);\n    }\n  }\n\n  async stopLEScan(): Promise<void> {\n    if (this.scan?.active) {\n      this.scan.stop();\n    }\n    this.scan = null;\n  }\n\n  async getDevices(options: GetDevicesOptions): Promise<GetDevicesResult> {\n    const devices = await navigator.bluetooth.getDevices();\n    const bleDevices = devices\n      .filter((device) => options.deviceIds.includes(device.id))\n      .map((device) => {\n        this.deviceMap.set(device.id, device);\n        const bleDevice = this.getBleDevice(device);\n        return bleDevice;\n      });\n    return { devices: bleDevices };\n  }\n\n  async getConnectedDevices(_options: GetConnectedDevicesOptions): Promise<GetDevicesResult> {\n    const devices = await navigator.bluetooth.getDevices();\n    const bleDevices = devices\n      .filter((device) => {\n        return device.gatt?.connected;\n      })\n      .map((device) => {\n        this.deviceMap.set(device.id, device);\n        const bleDevice = this.getBleDevice(device);\n        return bleDevice;\n      });\n    return { devices: bleDevices };\n  }\n\n  async connect(options: DeviceIdOptions & TimeoutOptions): Promise<void> {\n    const device = this.getDeviceFromMap(options.deviceId);\n    device.removeEventListener('gattserverdisconnected', this.onDisconnectedCallback);\n    device.addEventListener('gattserverdisconnected', this.onDisconnectedCallback);\n    const timeoutError = Symbol();\n    if (device.gatt === undefined) {\n      throw new Error('No gatt server available.');\n    }\n    try {\n      const timeout = options.timeout ?? this.DEFAULT_CONNECTION_TIMEOUT;\n      await runWithTimeout(device.gatt.connect(), timeout, timeoutError);\n    } catch (error) {\n      // cancel pending connect call, does not work yet in chromium because of a bug:\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=684073\n      await device.gatt?.disconnect();\n      if (error === timeoutError) {\n        throw new Error('Connection timeout');\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  private onDisconnectedCallback = this.onDisconnected.bind(this);\n\n  private onDisconnected(event: Event): void {\n    const deviceId = (event.target as BluetoothDevice).id;\n    const key = `disconnected|${deviceId}`;\n    this.notifyListeners(key, null);\n  }\n\n  async createBond(_options: DeviceIdOptions): Promise<void> {\n    throw this.unavailable('createBond is not available on web.');\n  }\n\n  async isBonded(_options: DeviceIdOptions): Promise<BooleanResult> {\n    throw this.unavailable('isBonded is not available on web.');\n  }\n\n  async disconnect(options: DeviceIdOptions): Promise<void> {\n    this.getDeviceFromMap(options.deviceId).gatt?.disconnect();\n  }\n\n  async getServices(options: DeviceIdOptions): Promise<BleServices> {\n    const services = (await this.getDeviceFromMap(options.deviceId).gatt?.getPrimaryServices()) ?? [];\n    const bleServices: BleService[] = [];\n    for (const service of services) {\n      const characteristics = await service.getCharacteristics();\n      const bleCharacteristics: BleCharacteristic[] = [];\n      for (const characteristic of characteristics) {\n        bleCharacteristics.push({\n          uuid: characteristic.uuid,\n          properties: this.getProperties(characteristic),\n          descriptors: await this.getDescriptors(characteristic),\n        });\n      }\n      bleServices.push({ uuid: service.uuid, characteristics: bleCharacteristics });\n    }\n    return { services: bleServices };\n  }\n\n  private async getDescriptors(characteristic: BluetoothRemoteGATTCharacteristic): Promise<BleDescriptor[]> {\n    try {\n      const descriptors = await characteristic.getDescriptors();\n      return descriptors.map((descriptor) => ({\n        uuid: descriptor.uuid,\n      }));\n    } catch {\n      return [];\n    }\n  }\n\n  private getProperties(characteristic: BluetoothRemoteGATTCharacteristic): BleCharacteristicProperties {\n    return {\n      broadcast: characteristic.properties.broadcast,\n      read: characteristic.properties.read,\n      writeWithoutResponse: characteristic.properties.writeWithoutResponse,\n      write: characteristic.properties.write,\n      notify: characteristic.properties.notify,\n      indicate: characteristic.properties.indicate,\n      authenticatedSignedWrites: characteristic.properties.authenticatedSignedWrites,\n      reliableWrite: characteristic.properties.reliableWrite,\n      writableAuxiliaries: characteristic.properties.writableAuxiliaries,\n    };\n  }\n\n  private async getCharacteristic(\n    options: ReadOptions | WriteOptions\n  ): Promise<BluetoothRemoteGATTCharacteristic | undefined> {\n    const service = await this.getDeviceFromMap(options.deviceId).gatt?.getPrimaryService(options?.service);\n    return service?.getCharacteristic(options?.characteristic);\n  }\n\n  private async getDescriptor(\n    options: ReadDescriptorOptions | WriteDescriptorOptions\n  ): Promise<BluetoothRemoteGATTDescriptor | undefined> {\n    const characteristic = await this.getCharacteristic(options);\n    return characteristic?.getDescriptor(options?.descriptor);\n  }\n\n  async discoverServices(_options: DeviceIdOptions): Promise<void> {\n    throw this.unavailable('discoverServices is not available on web.');\n  }\n\n  async getMtu(_options: DeviceIdOptions): Promise<GetMtuResult> {\n    throw this.unavailable('getMtu is not available on web.');\n  }\n\n  async requestConnectionPriority(_options: RequestConnectionPriorityOptions): Promise<void> {\n    throw this.unavailable('requestConnectionPriority is not available on web.');\n  }\n\n  async readRssi(_options: DeviceIdOptions): Promise<ReadRssiResult> {\n    throw this.unavailable('readRssi is not available on web.');\n  }\n\n  async read(options: ReadOptions): Promise<ReadResult> {\n    const characteristic = await this.getCharacteristic(options);\n    const value = await characteristic?.readValue();\n    return { value };\n  }\n\n  async write(options: WriteOptions): Promise<void> {\n    const characteristic = await this.getCharacteristic(options);\n    let dataView: DataView;\n    if (typeof options.value === 'string') {\n      dataView = hexStringToDataView(options.value);\n    } else {\n      dataView = options.value;\n    }\n    await characteristic?.writeValueWithResponse(dataView);\n  }\n\n  async writeWithoutResponse(options: WriteOptions): Promise<void> {\n    const characteristic = await this.getCharacteristic(options);\n    let dataView: DataView;\n    if (typeof options.value === 'string') {\n      dataView = hexStringToDataView(options.value);\n    } else {\n      dataView = options.value;\n    }\n    await characteristic?.writeValueWithoutResponse(dataView);\n  }\n\n  async readDescriptor(options: ReadDescriptorOptions): Promise<ReadResult> {\n    const descriptor = await this.getDescriptor(options);\n    const value = await descriptor?.readValue();\n    return { value };\n  }\n\n  async writeDescriptor(options: WriteDescriptorOptions): Promise<void> {\n    const descriptor = await this.getDescriptor(options);\n    let dataView: DataView;\n    if (typeof options.value === 'string') {\n      dataView = hexStringToDataView(options.value);\n    } else {\n      dataView = options.value;\n    }\n    await descriptor?.writeValue(dataView);\n  }\n\n  async startNotifications(options: ReadOptions): Promise<void> {\n    const characteristic = await this.getCharacteristic(options);\n    characteristic?.removeEventListener('characteristicvaluechanged', this.onCharacteristicValueChangedCallback);\n    characteristic?.addEventListener('characteristicvaluechanged', this.onCharacteristicValueChangedCallback);\n    await characteristic?.startNotifications();\n  }\n\n  private onCharacteristicValueChangedCallback = this.onCharacteristicValueChanged.bind(this);\n\n  private onCharacteristicValueChanged(event: Event): void {\n    const characteristic = event.target as BluetoothRemoteGATTCharacteristic;\n    const key = `notification|${characteristic.service?.device.id}|${characteristic.service?.uuid}|${characteristic.uuid}`;\n    this.notifyListeners(key, {\n      value: characteristic.value,\n    });\n  }\n\n  async stopNotifications(options: ReadOptions): Promise<void> {\n    const characteristic = await this.getCharacteristic(options);\n    await characteristic?.stopNotifications();\n  }\n\n  private getFilters(options?: RequestBleDeviceOptions): BluetoothLEScanFilter[] {\n    const filters: BluetoothLEScanFilter[] = [];\n    for (const service of options?.services ?? []) {\n      filters.push({\n        services: [service],\n        name: options?.name,\n        namePrefix: options?.namePrefix,\n      });\n    }\n    if ((options?.name || options?.namePrefix) && filters.length === 0) {\n      filters.push({\n        name: options.name,\n        namePrefix: options.namePrefix,\n      });\n    }\n    return filters;\n  }\n\n  private getDeviceFromMap(deviceId: string): BluetoothDevice {\n    const device = this.deviceMap.get(deviceId);\n    if (device === undefined) {\n      throw new Error('Device not found. Call \"requestDevice\", \"requestLEScan\" or \"getDevices\" first.');\n    }\n    return device;\n  }\n\n  private getBleDevice(device: BluetoothDevice): BleDevice {\n    const bleDevice: BleDevice = {\n      deviceId: device.id,\n      // use undefined instead of null if name is not available\n      name: device.name ?? undefined,\n    };\n    return bleDevice;\n  }\n}\n","export async function runWithTimeout(promise: Promise<unknown>, time: number, exception: symbol): Promise<unknown> {\n  let timer: ReturnType<typeof setTimeout>;\n  return Promise.race([\n    promise,\n    new Promise((_, reject) => {\n      timer = setTimeout(() => reject(exception), time);\n    }),\n  ]).finally(() => clearTimeout(timer));\n}\n"],"names":["BluetoothLeWeb","WebPlugin","constructor","deviceMap","Map","discoveredDevices","scan","DEFAULT_CONNECTION_TIMEOUT","onAdvertisementReceivedCallback","this","onAdvertisementReceived","bind","onDisconnectedCallback","onDisconnected","onCharacteristicValueChangedCallback","onCharacteristicValueChanged","async","navigator","bluetooth","unavailable","getAvailability","value","options","filters","getFilters","device","requestDevice","length","undefined","optionalServices","acceptAllDevices","set","id","getBleDevice","requestBleDeviceOptions","stopLEScan","removeEventListener","addEventListener","requestLEScan","acceptAllAdvertisements","keepRepeatedDevices","allowDuplicates","event","deviceId","has","_a","result","localName","name","rssi","txPower","manufacturerData","mapToObject","serviceData","uuids","_b","map","webUUIDToString","notifyListeners","active","stop","devices","getDevices","filter","deviceIds","includes","_options","gatt","connected","getDeviceFromMap","timeoutError","Symbol","Error","timeout","promise","time","exception","timer","Promise","race","_","reject","setTimeout","finally","clearTimeout","runWithTimeout","connect","error","disconnect","key","target","services","getPrimaryServices","bleServices","service","characteristics","getCharacteristics","bleCharacteristics","characteristic","push","uuid","properties","getProperties","descriptors","getDescriptors","descriptor","broadcast","read","writeWithoutResponse","write","notify","indicate","authenticatedSignedWrites","reliableWrite","writableAuxiliaries","getPrimaryService","getCharacteristic","getDescriptor","readValue","dataView","hexStringToDataView","writeValueWithResponse","writeValueWithoutResponse","writeValue","startNotifications","stopNotifications","namePrefix","get"],"sourceRoot":""}