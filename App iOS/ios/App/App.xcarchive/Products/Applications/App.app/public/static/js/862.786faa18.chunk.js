/*! For license information please see 862.786faa18.chunk.js.LICENSE.txt */
"use strict";(globalThis.webpackChunkionic_app_base=globalThis.webpackChunkionic_app_base||[]).push([[862],{862:(t,e,n)=>{n.r(e),n.d(e,{MENU_BACK_BUTTON_PRIORITY:()=>o,OVERLAY_BACK_BUTTON_PRIORITY:()=>a,blockHardwareBackButton:()=>i,startHardwareBackButton:()=>r});const i=()=>{document.addEventListener("backbutton",(()=>{}))},r=()=>{const t=document;let e=!1;t.addEventListener("backbutton",(()=>{if(e)return;let n=0,i=[];const r=new CustomEvent("ionBackButton",{bubbles:!1,detail:{register(t,e){i.push({priority:t,handler:e,id:n++})}}});t.dispatchEvent(r);const a=()=>{if(i.length>0){let t={priority:Number.MIN_SAFE_INTEGER,handler:()=>{},id:-1};i.forEach((e=>{e.priority>=t.priority&&(t=e)})),e=!0,i=i.filter((e=>e.id!==t.id)),(async t=>{try{if(null===t||void 0===t?void 0:t.handler){const e=t.handler(a);null!=e&&await e}}catch(e){console.error(e)}})(t).then((()=>e=!1))}};a()}))},a=100,o=99}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGljL2pzLzg2Mi43ODZmYWExOC5jaHVuay5qcyIsIm1hcHBpbmdzIjoiO3lRQWFBLE1BQU1BLEVBQTBCQSxLQUM5QkMsU0FBU0MsaUJBQWlCLGNBQWMsUUFBVSxFQUU5Q0MsRUFBMEJBLEtBQzlCLE1BQU1DLEVBQU1ILFNBQ1osSUFBSUksR0FBTyxFQUNYRCxFQUFJRixpQkFBaUIsY0FBYyxLQUNqQyxHQUFJRyxFQUNGLE9BRUYsSUFBSUMsRUFBUSxFQUNSQyxFQUFXLEdBQ2YsTUFBTUMsRUFBSyxJQUFJQyxZQUFZLGdCQUFpQixDQUMxQ0MsU0FBUyxFQUNUQyxPQUFRLENBQ05DLFNBQVNDLEVBQVVDLEdBQ2pCUCxFQUFTUSxLQUFLLENBQUVGLFdBQVVDLFVBQVNFLEdBQUlWLEtBQ3pDLEtBR0pGLEVBQUlhLGNBQWNULEdBQ2xCLE1BYU1VLEVBQWtCQSxLQUN0QixHQUFJWCxFQUFTWSxPQUFTLEVBQUcsQ0FDdkIsSUFBSUMsRUFBa0IsQ0FDcEJQLFNBQVVRLE9BQU9DLGlCQUNqQlIsUUFBU0EsS0FBZSxFQUN4QkUsSUFBSyxHQUVQVCxFQUFTZ0IsU0FBU1QsSUFDWkEsRUFBUUQsVUFBWU8sRUFBZ0JQLFdBQ3RDTyxFQUFrQk4sRUFDcEIsSUFFRlQsR0FBTyxFQUNQRSxFQUFXQSxFQUFTaUIsUUFBUVYsR0FBWUEsRUFBUUUsS0FBT0ksRUFBZ0JKLEtBMUJyRFMsV0FDcEIsSUFDRSxHQUF3QixPQUFwQkMsUUFBZ0QsSUFBcEJBLE9BQTZCLEVBQVNBLEVBQWdCWixRQUFTLENBQzdGLE1BQU1hLEVBQVNELEVBQWdCWixRQUFRSSxHQUN6QixNQUFWUyxTQUNJQSxDQUVWLENBQ0YsQ0FDQSxNQUFPQyxHQUNMQyxRQUFRQyxNQUFNRixFQUNoQixHQWdCRUcsQ0FBY1gsR0FBaUJZLE1BQUssSUFBTzNCLEdBQU8sR0FDcEQsR0FFRmEsR0FBaUIsR0FDakIsRUFFRWUsRUFBK0IsSUFDL0JDLEVBQTRCIiwic291cmNlcyI6WyIuLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvY29tcG9uZW50cy9oYXJkd2FyZS1iYWNrLWJ1dHRvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIChDKSBJb25pYyBodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tIC0gTUlUIExpY2Vuc2VcbiAqL1xuLyoqXG4gKiBXaGVuIGhhcmR3YXJlQmFja0J1dHRvbjogZmFsc2UgaW4gY29uZmlnLFxuICogd2UgbmVlZCB0byBtYWtlIHN1cmUgd2UgYWxzbyBibG9jayB0aGUgZGVmYXVsdFxuICogd2VidmlldyBiZWhhdmlvci4gSWYgd2UgZG9uJ3QgdGhlbiBpdCB3aWxsIGJlXG4gKiBwb3NzaWJsZSBmb3IgdXNlcnMgdG8gbmF2aWdhdGUgYmFja3dhcmQgd2hpbGVcbiAqIGFuIG92ZXJsYXkgaXMgc3RpbGwgb3Blbi4gQWRkaXRpb25hbGx5LCBpdCB3aWxsXG4gKiBnaXZlIHRoZSBhcHBlYXJhbmNlIHRoYXQgdGhlIGhhcmR3YXJlQmFja0J1dHRvblxuICogY29uZmlnIGlzIG5vdCB3b3JraW5nIGFzIHRoZSBwYWdlIHRyYW5zaXRpb25cbiAqIHdpbGwgc3RpbGwgaGFwcGVuLlxuICovXG5jb25zdCBibG9ja0hhcmR3YXJlQmFja0J1dHRvbiA9ICgpID0+IHtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmFja2J1dHRvbicsICgpID0+IHsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbn07XG5jb25zdCBzdGFydEhhcmR3YXJlQmFja0J1dHRvbiA9ICgpID0+IHtcbiAgY29uc3QgZG9jID0gZG9jdW1lbnQ7XG4gIGxldCBidXN5ID0gZmFsc2U7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdiYWNrYnV0dG9uJywgKCkgPT4ge1xuICAgIGlmIChidXN5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBpbmRleCA9IDA7XG4gICAgbGV0IGhhbmRsZXJzID0gW107XG4gICAgY29uc3QgZXYgPSBuZXcgQ3VzdG9tRXZlbnQoJ2lvbkJhY2tCdXR0b24nLCB7XG4gICAgICBidWJibGVzOiBmYWxzZSxcbiAgICAgIGRldGFpbDoge1xuICAgICAgICByZWdpc3Rlcihwcmlvcml0eSwgaGFuZGxlcikge1xuICAgICAgICAgIGhhbmRsZXJzLnB1c2goeyBwcmlvcml0eSwgaGFuZGxlciwgaWQ6IGluZGV4KysgfSk7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICAgIGRvYy5kaXNwYXRjaEV2ZW50KGV2KTtcbiAgICBjb25zdCBleGVjdXRlQWN0aW9uID0gYXN5bmMgKGhhbmRsZXJSZWdpc3RlcikgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGhhbmRsZXJSZWdpc3RlciA9PT0gbnVsbCB8fCBoYW5kbGVyUmVnaXN0ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGhhbmRsZXJSZWdpc3Rlci5oYW5kbGVyKSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gaGFuZGxlclJlZ2lzdGVyLmhhbmRsZXIocHJvY2Vzc0hhbmRsZXJzKTtcbiAgICAgICAgICBpZiAocmVzdWx0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGF3YWl0IHJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBwcm9jZXNzSGFuZGxlcnMgPSAoKSA9PiB7XG4gICAgICBpZiAoaGFuZGxlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgc2VsZWN0ZWRIYW5kbGVyID0ge1xuICAgICAgICAgIHByaW9yaXR5OiBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUixcbiAgICAgICAgICBoYW5kbGVyOiAoKSA9PiB1bmRlZmluZWQsXG4gICAgICAgICAgaWQ6IC0xLFxuICAgICAgICB9O1xuICAgICAgICBoYW5kbGVycy5mb3JFYWNoKChoYW5kbGVyKSA9PiB7XG4gICAgICAgICAgaWYgKGhhbmRsZXIucHJpb3JpdHkgPj0gc2VsZWN0ZWRIYW5kbGVyLnByaW9yaXR5KSB7XG4gICAgICAgICAgICBzZWxlY3RlZEhhbmRsZXIgPSBoYW5kbGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGJ1c3kgPSB0cnVlO1xuICAgICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcigoaGFuZGxlcikgPT4gaGFuZGxlci5pZCAhPT0gc2VsZWN0ZWRIYW5kbGVyLmlkKTtcbiAgICAgICAgZXhlY3V0ZUFjdGlvbihzZWxlY3RlZEhhbmRsZXIpLnRoZW4oKCkgPT4gKGJ1c3kgPSBmYWxzZSkpO1xuICAgICAgfVxuICAgIH07XG4gICAgcHJvY2Vzc0hhbmRsZXJzKCk7XG4gIH0pO1xufTtcbmNvbnN0IE9WRVJMQVlfQkFDS19CVVRUT05fUFJJT1JJVFkgPSAxMDA7XG5jb25zdCBNRU5VX0JBQ0tfQlVUVE9OX1BSSU9SSVRZID0gOTk7IC8vIDEgbGVzcyB0aGFuIG92ZXJsYXkgcHJpb3JpdHkgc2luY2UgbWVudSBpcyBkaXNwbGF5ZWQgYmVoaW5kIG92ZXJsYXlzXG5cbmV4cG9ydCB7IE1FTlVfQkFDS19CVVRUT05fUFJJT1JJVFksIE9WRVJMQVlfQkFDS19CVVRUT05fUFJJT1JJVFksIGJsb2NrSGFyZHdhcmVCYWNrQnV0dG9uLCBzdGFydEhhcmR3YXJlQmFja0J1dHRvbiB9O1xuIl0sIm5hbWVzIjpbImJsb2NrSGFyZHdhcmVCYWNrQnV0dG9uIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwic3RhcnRIYXJkd2FyZUJhY2tCdXR0b24iLCJkb2MiLCJidXN5IiwiaW5kZXgiLCJoYW5kbGVycyIsImV2IiwiQ3VzdG9tRXZlbnQiLCJidWJibGVzIiwiZGV0YWlsIiwicmVnaXN0ZXIiLCJwcmlvcml0eSIsImhhbmRsZXIiLCJwdXNoIiwiaWQiLCJkaXNwYXRjaEV2ZW50IiwicHJvY2Vzc0hhbmRsZXJzIiwibGVuZ3RoIiwic2VsZWN0ZWRIYW5kbGVyIiwiTnVtYmVyIiwiTUlOX1NBRkVfSU5URUdFUiIsImZvckVhY2giLCJmaWx0ZXIiLCJhc3luYyIsImhhbmRsZXJSZWdpc3RlciIsInJlc3VsdCIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJleGVjdXRlQWN0aW9uIiwidGhlbiIsIk9WRVJMQVlfQkFDS19CVVRUT05fUFJJT1JJVFkiLCJNRU5VX0JBQ0tfQlVUVE9OX1BSSU9SSVRZIl0sInNvdXJjZVJvb3QiOiIifQ==